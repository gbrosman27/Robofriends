{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","id","name","email","CardList","robots","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"oOAoBeA,EAhBF,SAACC,GACV,OAGI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,cAAcC,IAAG,+BAA0BH,EAAMI,GAAhC,cAC1B,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCUXC,EAlBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACX,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACQ,kBAAC,EAAD,CACAC,IAAOD,EACPP,GAAMI,EAAOG,GAAGP,GAChBC,KAAQG,EAAOG,GAAGN,KAClBC,MAASE,EAAOG,GAAGL,aCGhCO,EAbG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKb,UAAU,OACf,2BACIA,UAAU,gCACVc,KAAK,SACLC,YAAY,kBACZC,SAAUH,MCCPI,EATA,SAAClB,GACZ,OACI,yBAAKmB,MAAO,CAACC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAO,UAC9DtB,EAAMuB,WCqBJC,E,kDAvBX,WAAYxB,GAAO,IAAD,8BACd,gBACKyB,MAAM,CACPC,UAAU,GAHA,E,8DAUAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAKzB,OAAGG,KAAKJ,MAAMC,SACH,qDAEJG,KAAK7B,MAAMuB,a,GApBEQ,aC2DbC,G,wDAhDX,aAAc,IAAD,8BACT,gBAgBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAfzC,EAAKZ,MAAQ,CACTjB,OAAQ,GACR2B,YAAa,IALR,E,gEAUO,IAAD,OACfG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKZ,SAAS,CAACtB,OAAQkC,S,+BASlC,MAE0Bb,KAAKJ,MAA5BjB,EAFH,EAEGA,OAAQ2B,EAFX,EAEWA,YACTQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAMxC,KAAKyC,cAAcC,SAASZ,EAAYW,kBAEzD,OAAe,IAAXtC,EACO,8CAKH,yBAAKP,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWa,aAAce,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUzB,OAAQmC,W,GAxC5BK,IAAMjB,YCDJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,a","file":"static/js/main.0f4f278f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n// Creating a Card Component.\r\nconst Card = (props) => {\r\n    return (\r\n        // text center, background color, border radius, padding, margin, grow on hover, shadow.\r\n        // Generate random robot image for each card from robohash api.\r\n        <div className='tc bg-light-green dib br3 pa2 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot_photo' src={`https://robohash.org/${props.id}?200x200`}/> \r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n// Export the Card so it is useable by the app.\r\nexport default Card","import React from 'react';\r\nimport Card from './Card';\r\n\r\n// Use map to loop through all contact entries and create a card for each of them.\r\nconst CardList = ({robots}) => {\r\n        return ( \r\n            <div> \r\n                {\r\n                robots.map((user, i) => {\r\n                    return (\r\n                            <Card \r\n                            key = {i}\r\n                            id = {robots[i].id}\r\n                            name = {robots[i].name}\r\n                            email = {robots[i].email}\r\n                            />\r\n                            )\r\n                    })\r\n                } \r\n            </div>)\r\n        }\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\n//Use destructuring to grab the props object and it's properties.\r\nconst SearchBox = ({searchChange}) => {\r\n    return(\r\n        <div className='pa2'>\r\n        <input \r\n            className='pa3 ba b--green bg-light-blue' \r\n            type='search' \r\n            placeholder='search contacts'\r\n            onChange={searchChange}\r\n        />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflow: 'scroll', border: '1px solid black', height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n    constructor(props){\r\n        super()\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n\r\n\r\n    // If this is triggered, render h1 tag.\r\n    componentDidCatch(error, info){\r\n        this.setState({hasError: true})\r\n    }\r\n\r\n\r\n    render(){\r\n        if(this.state.hasError){\r\n            return <h1>Something went wrong!</h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\n\r\n// Destructured format because robots.js is export, not export default.\r\n//import { robots } from './robots';\r\n\r\n\r\n// Smart Component due to having 'state' (data that describes the app).\r\nclass App extends React.Component {\r\n    constructor(){\r\n        super()\r\n        // state can change and affect the app. Run with empty array.\r\n        this.state = {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    // Fetch from url, get users and update users with setState.\r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response => response.json())\r\n        .then(users => this.setState({robots: users}));\r\n    }\r\n\r\n    //Filter robots according to searchfield. Use arrow functions since this is not built into react.\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n    }\r\n\r\n    // Render the app display.\r\n    render(){    \r\n        // Use destructuring for this.state.\r\n        const {robots, searchfield} = this.state;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n        })\r\n        if (robots === 0){\r\n            return <h1>Loading Robots</h1>\r\n        }\r\n        else{\r\n            return(\r\n                // Text centered.\r\n                <div className='tc'> \r\n                    <h1 className='f1'>RoboFriends</h1>\r\n                    <SearchBox searchChange={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}